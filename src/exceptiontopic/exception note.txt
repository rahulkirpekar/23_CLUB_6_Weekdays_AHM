Exception:- Abnormal Scenario
------------
1)
	no1 = 20;
	no2 = 0;

	ans = no1 / no2;// ArithmeticException----devide by zero

2) String name = null;

	SOP(name.length());// NullpointerException

3) int a[] = new int[5];//a[0]..a[4]

	a[5] = 100;// ArrayIndexoutofBoundException

//		 01234
4) String name ="royal";

SOP(name.charAt(5));// StringindexoutofBoundException

5) String value = "abc";

	    123
	int no = Integer.parseInt(value);// NumberFormateException

6) 
		A
		|
	-----------------
	|		|
	B		C

A  obj = new B();

C c = (C)obj;// ClassCastException 

			Type of Exception
			------------------
	1) Checked			2) Unchecked
	----------------		----------------
	compiletime			runtime--JVM
	compiler--compiletime		
------------------------------------------------------------------------------------------------------
				Hierarchy of Exception
				------------------------

				Throwable(c)
				   |
				Exception(C)
				   |
		-------------------------------------------------
		|--Checked					        |---Unchecked
---SQLException						RuntimeException(C)
---FileNotFoundException					|
---ClassNotFoundException			---ArithmeticException
		....						---NullpointerException
									---ArrayIndexoutofBoundException
									---StringindexoutofBoundException
									---NumberFormateException
									---ClassCastException 
									....











finally block:-
----------------

	try
	{
		// raise exception code
	}catch()
	{
		// exception handle	
	}finally
	{
		// code---compulsory...execute
		// connection [db/socket/file]---closings statements
	}
	
	
	
	try
	{
		// raise exception code
	}catch()
	{
		// exception handle	
	}catch()
	{
		// exception handle	
	}finally
	{
		// code---compulsory...execute
		// connection [db/socket/file]---closings statements
	}



	try
	{
		// raise exception code
	}finally
	{
		// code---compulsory...execute
		// connection [db/socket/file]---closings statements
	}
	
	
	try
	{
		// raise exception code
	}catch()
	{
		// code---compulsory...execute
		// connection [db/socket/file]---closings statements
	}
---------------------------------------------------------------------------------------------------------------
	Type of Exception
	===================
	
		1) Checked Exception(CompileTime===>Compiler)
		2) UnChecked Exception(Runtime====>JVM)

	==> throw
	==> throws


















	==> custom exception[User Defined Exception]
	
	
		1) Checked Exception(CompileTime===>Compiler)
		===============================================
		
		// InvalidAgeException(msg) ===> Exception(msg) ===> Throwable(msg) ===> SET into ErrorLog
		
		public class InvalidAgeException extends Exception
		{
			public InvalidAgeException(String msg)
			{
				super(msg);
			}
		}
		
		
		2) UnChecked Exception(Runtime====>JVM)
		===============================================

		public class InvalidAgeException extends RuntimeException
		{
			public InvalidAgeException(String msg)
			{
				super(msg);
			}
		}
























	





















